# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sat Oct 27 14:06:05 2012

import wx

class wxFrameChooser(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: wxFrameChooser.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_3 = wx.Panel(self, -1)
        self.text_ctrl_3 = wx.TextCtrl(self.panel_3, -1, "Step 3) Select the people or pages that you would like to download.", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.list_box_1 = wx.ListBox(self.panel_3, -1, choices=["Myself", "Jackie Murphy", "Monika Henn", "Mat Stolarik", "Melissa Patterson"], style=wx.LB_MULTIPLE | wx.LB_ALWAYS_SB)
        self.button_chooser = wx.Button(self.panel_3, -1, "Select Options")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: wxFrameChooser.__set_properties
        self.SetTitle("PhotoGrabber")
        self.SetSize((400, 200))
        self.list_box_1.SetToolTipString("Press ctrl to select multiple users or pages")
        self.list_box_1.SetSelection(0)
        self.panel_3.SetMinSize((400, 200))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: wxFrameChooser.__do_layout
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_1.Add(self.text_ctrl_3, 1, wx.EXPAND, 0)
        sizer_3_1.Add(self.list_box_1, 3, wx.EXPAND, 0)
        sizer_3_1.Add(self.button_chooser, 1, wx.EXPAND, 0)
        self.panel_3.SetSizer(sizer_3_1)
        sizer_3.Add(self.panel_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    # PhotoGrabber glue

    def Setup(self, state):
        self.state = state
        # populate listbox
        # import pdb;pdb.set_trace()
        self.list_box_1.Set([x['name'] for x in self.state.target_list])
        self.button_chooser.Bind(wx.EVT_BUTTON, self.Submit)

    def Submit(self, event):
        # tell self.state which items were selected
        # self.state.selected_list
        # import pdb;pdb.set_trace()
        self.state.targets = []
        for id in self.list_box_1.GetSelections():
            self.state.targets.append(self.state.target_list[id]['id'])

        self.state.toOptions()
